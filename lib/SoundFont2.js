!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("SoundFont2",[],t):"object"==typeof exports?exports.SoundFont2=t():e.SoundFont2=t()}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="./src/index.ts")}({"./src/chunk.ts":
/*!**********************!*\
  !*** ./src/chunk.ts ***!
  \**********************/
/*! exports provided: SF2Chunk */function(e,t,n){"use strict";n.r(t),n.d(t,"SF2Chunk",function(){return d});var r=n(/*! ./riff */"./src/riff/index.ts"),o=n(/*! ./constants */"./src/constants.ts"),s=n(/*! ./chunks */"./src/chunks/index.ts");function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var d=function(e){function t(e){var n,r,o,s,i,c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,n=!(o=a(t).call(this,e.id,e.length,e.buffer,e.subChunks))||"object"!==u(o)&&"function"!=typeof o?f(r):o,s=f(f(n)),c=void 0,(i="subChunks")in s?Object.defineProperty(s,i,{value:c,enumerable:!0,configurable:!0,writable:!0}):s[i]=c,n.subChunks=e.subChunks.map(function(e){return new t(e)}),n}var n,d,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,r["RIFFChunk"]),n=t,(d=[{key:"getMetaData",value:function(){if("LIST"!==this.id)throw new r.ParseError("Unexpected chunk ID","'LIST'","'".concat(this.id,"'"));var e=this.subChunks.reduce(function(e,t){if("ifil"===t.id||"iver"===t.id){if(t.length!==o.SF_VERSION_LENGTH)throw new r.ParseError("Invalid size for the '".concat(t.id,"' sub-chunk"));e[t.id]="".concat(t.getInt16(),".").concat(t.getInt16(2))}else e[t.id]=t.getString();return e},{});if(!e.ifil)throw new r.ParseError("Missing required 'ifil' sub-chunk");if(!e.INAM)throw new r.ParseError("Missing required 'INAM' sub-chunk");return{version:e.ifil,soundEngine:e.isng||"EMU8000",name:e.INAM,rom:e.irom,romVersion:e.iver,creationDate:e.ICRD,author:e.IENG,product:e.IPRD,copyright:e.ICOP,comments:e.ICMT,createdBy:e.ISFT}}},{key:"getSampleData",value:function(){if("LIST"!==this.id)throw new r.ParseError("Unexpected chunk ID","'LIST'","'".concat(this.id,"'"));var e=this.subChunks[0];if("smpl"!==e.id)throw new r.ParseError("Invalid chunk signature","'smpl'","'".concat(e.id,"'"));return e.buffer}},{key:"getPresetData",value:function(){if("LIST"!==this.id)throw new r.ParseError("Unexpected chunk ID","'LIST'","'".concat(this.id,"'"));return{presetHeaders:Object(s.getPresetHeaders)(this.subChunks[0]),presetZones:Object(s.getZones)(this.subChunks[1],"pbag"),presetModulators:Object(s.getModulators)(this.subChunks[2],"pmod"),presetGenerators:Object(s.getGenerators)(this.subChunks[3],"pgen"),instrumentHeaders:Object(s.getInstrumentHeaders)(this.subChunks[4]),instrumentZones:Object(s.getZones)(this.subChunks[5],"ibag"),instrumentModulators:Object(s.getModulators)(this.subChunks[6],"imod"),instrumentGenerators:Object(s.getGenerators)(this.subChunks[7],"igen"),sampleHeaders:Object(s.getSampleHeaders)(this.subChunks[8])}}}])&&i(n.prototype,d),l&&i(n,l),t}()},"./src/chunks/generators.ts":
/*!**********************************!*\
  !*** ./src/chunks/generators.ts ***!
  \**********************************/
/*! exports provided: getGenerators */function(e,t,n){"use strict";n.r(t),n.d(t,"getGenerators",function(){return c});var r=n(/*! ~/riff */"./src/riff/index.ts"),o=n(/*! ~/types */"./src/types/index.ts"),s=n(/*! ~/constants */"./src/constants.ts"),u=[o.GeneratorType.StartAddrsOffset,o.GeneratorType.EndAddrsOffset,o.GeneratorType.StartLoopAddrsOffset,o.GeneratorType.EndLoopAddrsOffset,o.GeneratorType.StartAddrsCoarseOffset,o.GeneratorType.EndAddrsCoarseOffset,o.GeneratorType.StartLoopAddrsCoarseOffset,o.GeneratorType.KeyNum,o.GeneratorType.Velocity,o.GeneratorType.EndLoopAddrsCoarseOffset,o.GeneratorType.SampleModes,o.GeneratorType.ExclusiveClass,o.GeneratorType.OverridingRootKey],i=[o.GeneratorType.Unused1,o.GeneratorType.Unused2,o.GeneratorType.Unused3,o.GeneratorType.Unused4,o.GeneratorType.Reserved1,o.GeneratorType.Reserved2,o.GeneratorType.Reserved3],a=[o.GeneratorType.KeyRange,o.GeneratorType.VelRange],c=function(e,t){if(e.id!==t)throw new r.ParseError("Unexpected chunk ID","'".concat(t,"'"),"'".concat(e.id,"'"));if(e.length%s.SF_GENERATOR_SIZE)throw new r.ParseError("Invalid size for the '".concat(t,"' sub-chunk"));return e.iterate(function(e){var n=e.getInt16();return o.GeneratorType[n]?"pgen"===t&&u.includes(n)?null:"igen"===t&&i.includes(n)?null:a.includes(n)?{id:n,range:{lo:e.getByte(),hi:e.getByte()}}:{id:n,amount:e.getInt16BE()}:null})}},"./src/chunks/index.ts":
/*!*****************************!*\
  !*** ./src/chunks/index.ts ***!
  \*****************************/
/*! exports provided: getGenerators, getModulators, getZones, getItemsInZone, getInstrumentHeaders, getPresetHeaders, getSampleHeaders */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./instruments */"./src/chunks/instruments/index.ts");n.d(t,"getInstrumentHeaders",function(){return r.getInstrumentHeaders});var o=n(/*! ./presets */"./src/chunks/presets/index.ts");n.d(t,"getPresetHeaders",function(){return o.getPresetHeaders});var s=n(/*! ./samples */"./src/chunks/samples/index.ts");n.d(t,"getSampleHeaders",function(){return s.getSampleHeaders});var u=n(/*! ./generators */"./src/chunks/generators.ts");n.d(t,"getGenerators",function(){return u.getGenerators});var i=n(/*! ./modulators */"./src/chunks/modulators.ts");n.d(t,"getModulators",function(){return i.getModulators});var a=n(/*! ./zones */"./src/chunks/zones.ts");n.d(t,"getZones",function(){return a.getZones}),n.d(t,"getItemsInZone",function(){return a.getItemsInZone})},"./src/chunks/instruments/headers.ts":
/*!*******************************************!*\
  !*** ./src/chunks/instruments/headers.ts ***!
  \*******************************************/
/*! exports provided: getInstrumentHeaders */function(e,t,n){"use strict";n.r(t),n.d(t,"getInstrumentHeaders",function(){return s});var r=n(/*! ~/riff */"./src/riff/index.ts"),o=n(/*! ~/constants */"./src/constants.ts"),s=function(e){if("inst"!==e.id)throw new r.ParseError("Unexpected chunk ID","'inst'","'".concat(e.id,"'"));if(e.length%o.SF_INSTRUMENT_HEADER_SIZE)throw new r.ParseError("Invalid size for the 'inst' sub-chunk");return e.iterate(function(e){return{name:e.getString(),bagIndex:e.getInt16()}})}},"./src/chunks/instruments/index.ts":
/*!*****************************************!*\
  !*** ./src/chunks/instruments/index.ts ***!
  \*****************************************/
/*! exports provided: getInstrumentHeaders */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./headers */"./src/chunks/instruments/headers.ts");n.d(t,"getInstrumentHeaders",function(){return r.getInstrumentHeaders})},"./src/chunks/modulators.ts":
/*!**********************************!*\
  !*** ./src/chunks/modulators.ts ***!
  \**********************************/
/*! exports provided: getModulators */function(e,t,n){"use strict";n.r(t),n.d(t,"getModulators",function(){return s});var r=n(/*! ~/riff */"./src/riff/index.ts"),o=n(/*! ~/constants */"./src/constants.ts"),s=function(e,t){if(e.id!==t)throw new r.ParseError("Unexpected chunk ID","'".concat(t,"'"),"'".concat(e.id,"'"));if(e.length%o.SF_MODULATOR_SIZE)throw new r.ParseError("Invalid size for the '".concat(t,"' sub-chunk"));return e.iterate(function(e){return{source:e.getInt16BE(),id:e.getInt16BE(),amount:e.getInt16BE(),amountSource:e.getInt16BE(),transform:e.getInt16BE()}})}},"./src/chunks/presets/headers.ts":
/*!***************************************!*\
  !*** ./src/chunks/presets/headers.ts ***!
  \***************************************/
/*! exports provided: getPresetHeaders */function(e,t,n){"use strict";n.r(t),n.d(t,"getPresetHeaders",function(){return s});var r=n(/*! ~/riff */"./src/riff/index.ts"),o=n(/*! ~/constants */"./src/constants.ts"),s=function(e){if("phdr"!==e.id)throw new r.ParseError("Invalid chunk ID","'phdr'","'".concat(e.id,"'"));if(e.length%o.SF_PRESET_HEADER_SIZE)throw new r.ParseError("Invalid size for the 'phdr' sub-chunk");return e.iterate(function(e){return{name:e.getString(),preset:e.getInt16(),bank:e.getInt16(),bagIndex:e.getInt16(),library:e.getUInt32(),genre:e.getUInt32(),morphology:e.getUInt32()}})}},"./src/chunks/presets/index.ts":
/*!*************************************!*\
  !*** ./src/chunks/presets/index.ts ***!
  \*************************************/
/*! exports provided: getPresetHeaders */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./headers */"./src/chunks/presets/headers.ts");n.d(t,"getPresetHeaders",function(){return r.getPresetHeaders})},"./src/chunks/samples/headers.ts":
/*!***************************************!*\
  !*** ./src/chunks/samples/headers.ts ***!
  \***************************************/
/*! exports provided: getSampleHeaders */function(e,t,n){"use strict";n.r(t),n.d(t,"getSampleHeaders",function(){return s});var r=n(/*! ~/riff */"./src/riff/index.ts"),o=n(/*! ~/constants */"./src/constants.ts"),s=function(e){if("shdr"!==e.id)throw new r.ParseError("Unexpected chunk ID","'shdr'","'".concat(e.id,"'"));if(e.length%o.SF_SAMPLE_HEADER_SIZE)throw new r.ParseError("Invalid size for the 'shdr' sub-chunk");return e.iterate(function(e){return{name:e.getString(),start:e.getUInt32(),end:e.getUInt32(),startLoop:e.getUInt32(),endLoop:e.getUInt32(),sampleRate:e.getUInt32(),originalPitch:e.getByte(),pitchCorrection:e.getChar(),link:e.getInt16(),type:e.getInt16()}})}},"./src/chunks/samples/index.ts":
/*!*************************************!*\
  !*** ./src/chunks/samples/index.ts ***!
  \*************************************/
/*! exports provided: getSampleHeaders */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./headers */"./src/chunks/samples/headers.ts");n.d(t,"getSampleHeaders",function(){return r.getSampleHeaders})},"./src/chunks/zones.ts":
/*!*****************************!*\
  !*** ./src/chunks/zones.ts ***!
  \*****************************/
/*! exports provided: getZones, getItemsInZone */function(e,t,n){"use strict";n.r(t),n.d(t,"getZones",function(){return u}),n.d(t,"getItemsInZone",function(){return i});var r=n(/*! ~/riff */"./src/riff/index.ts"),o=n(/*! ~/constants */"./src/constants.ts"),s=n(/*! ~/types */"./src/types/index.ts"),u=function(e,t){if(e.id!==t)throw new r.ParseError("Unexpected chunk ID","'".concat(t,"'"),"'".concat(e.id,"'"));if(e.length%o.SF_BAG_SIZE)throw new r.ParseError("Invalid size for the '".concat(t,"' sub-chunk"));return e.iterate(function(e){return{generatorIndex:e.getInt16(),modulatorIndex:e.getInt16()}})},i=function(e,t,n,r,o,u){for(var i=[],f=0;f<e.length;f++){for(var d=e[f],l=e[f+1],h=d.bagIndex,p=l?l.bagIndex:t.length,v=[],y=h;y<p;y++){var g=a(y,t,n),E=c(y,t,r),m=E[s.GeneratorType.KeyRange]&&E[s.GeneratorType.KeyRange].range,b=E[u];if(b){var S=o[b.amount];S&&v.push({keyRange:m,modulators:g,generators:E,reference:S})}}i.push({header:d,zones:v})}return i},a=function(e,t,n){var r=t[e],o=t[e+1],s=r.modulatorIndex,u=o?o.modulatorIndex:t.length;return f(s,u,n)},c=function(e,t,n){var r=t[e],o=t[e+1],s=r.generatorIndex,u=o?o.generatorIndex:t.length;return f(s,u,n)},f=function(e,t,n){for(var r={},o=e;o<t;o++){var s=n[o];s&&(r[s.id]=s)}return r}},"./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/*! exports provided: SF_VERSION_LENGTH, SF_PRESET_HEADER_SIZE, SF_BAG_SIZE, SF_MODULATOR_SIZE, SF_GENERATOR_SIZE, SF_INSTRUMENT_HEADER_SIZE, SF_SAMPLE_HEADER_SIZE, DEFAULT_SAMPLE_RATE */function(e,t,n){"use strict";n.r(t),n.d(t,"SF_VERSION_LENGTH",function(){return r}),n.d(t,"SF_PRESET_HEADER_SIZE",function(){return o}),n.d(t,"SF_BAG_SIZE",function(){return s}),n.d(t,"SF_MODULATOR_SIZE",function(){return u}),n.d(t,"SF_GENERATOR_SIZE",function(){return i}),n.d(t,"SF_INSTRUMENT_HEADER_SIZE",function(){return a}),n.d(t,"SF_SAMPLE_HEADER_SIZE",function(){return c}),n.d(t,"DEFAULT_SAMPLE_RATE",function(){return f});var r=4,o=38,s=4,u=10,i=4,a=22,c=46,f=22050},"./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./types */"./src/types/index.ts");for(var o in r)"default"!==o&&function(e){n.d(t,e,function(){return r[e]})}(o);var s=n(/*! ./chunk */"./src/chunk.ts");n.d(t,"SF2Chunk",function(){return s.SF2Chunk});var u=n(/*! ./constants */"./src/constants.ts");n.d(t,"SF_VERSION_LENGTH",function(){return u.SF_VERSION_LENGTH}),n.d(t,"SF_PRESET_HEADER_SIZE",function(){return u.SF_PRESET_HEADER_SIZE}),n.d(t,"SF_BAG_SIZE",function(){return u.SF_BAG_SIZE}),n.d(t,"SF_MODULATOR_SIZE",function(){return u.SF_MODULATOR_SIZE}),n.d(t,"SF_GENERATOR_SIZE",function(){return u.SF_GENERATOR_SIZE}),n.d(t,"SF_INSTRUMENT_HEADER_SIZE",function(){return u.SF_INSTRUMENT_HEADER_SIZE}),n.d(t,"SF_SAMPLE_HEADER_SIZE",function(){return u.SF_SAMPLE_HEADER_SIZE}),n.d(t,"DEFAULT_SAMPLE_RATE",function(){return u.DEFAULT_SAMPLE_RATE});var i=n(/*! ./soundFont2 */"./src/soundFont2.ts");n.d(t,"SoundFont2",function(){return i.SoundFont2})},"./src/riff/chunkIterator.ts":
/*!***********************************!*\
  !*** ./src/riff/chunkIterator.ts ***!
  \***********************************/
/*! exports provided: ChunkIterator */function(e,t,n){"use strict";n.r(t),n.d(t,"ChunkIterator",function(){return u});var r=n(/*! ~/utils */"./src/utils/index.ts");function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s(this,"target",[]),s(this,"chunk",void 0),s(this,"position",0),this.chunk=t,this.position=n}var t,n,u;return t=e,(n=[{key:"iterate",value:function(e){for(;this.position<this.chunk.length;){var t=e(this);t&&this.target.push(t)}}},{key:"getString",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:20,t=Object(r.getStringFromBuffer)(this.getBuffer(this.position,e));return this.position+=e,t}},{key:"getInt16",value:function(){return this.chunk.buffer[this.position++]|this.chunk.buffer[this.position++]<<8}},{key:"getInt16BE",value:function(){return this.getInt16()<<16>>16}},{key:"getUInt32",value:function(){return(this.chunk.buffer[this.position++]|this.chunk.buffer[this.position++]<<8|this.chunk.buffer[this.position++]<<16|this.chunk.buffer[this.position++]<<24)>>>0}},{key:"getByte",value:function(){return this.chunk.buffer[this.position++]}},{key:"getChar",value:function(){return this.chunk.buffer[this.position++]<<24>>24}},{key:"skip",value:function(e){this.position+=e}},{key:"getBuffer",value:function(e,t){return this.chunk.buffer.subarray(e,e+t)}},{key:"currentPosition",get:function(){return this.position}}])&&o(t.prototype,n),u&&o(t,u),e}()},"./src/riff/index.ts":
/*!***************************!*\
  !*** ./src/riff/index.ts ***!
  \***************************/
/*! exports provided: ChunkIterator, ParseError, parseBuffer, getChunk, getChunkLength, getSubChunks, getChunkId, RIFFChunk */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./chunkIterator */"./src/riff/chunkIterator.ts");n.d(t,"ChunkIterator",function(){return r.ChunkIterator});var o=n(/*! ./parseError */"./src/riff/parseError.ts");n.d(t,"ParseError",function(){return o.ParseError});var s=n(/*! ./parser */"./src/riff/parser.ts");n.d(t,"parseBuffer",function(){return s.parseBuffer}),n.d(t,"getChunk",function(){return s.getChunk}),n.d(t,"getChunkLength",function(){return s.getChunkLength}),n.d(t,"getSubChunks",function(){return s.getSubChunks}),n.d(t,"getChunkId",function(){return s.getChunkId});var u=n(/*! ./riffChunk */"./src/riff/riffChunk.ts");n.d(t,"RIFFChunk",function(){return u.RIFFChunk})},"./src/riff/parseError.ts":
/*!********************************!*\
  !*** ./src/riff/parseError.ts ***!
  \********************************/
/*! exports provided: ParseError */function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e){var t="function"==typeof Map?new Map:void 0;return(s=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return u(e,arguments,a(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),i(r,e)})(e)}function u(e,t,n){return(u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&i(o,n.prototype),o}).apply(null,arguments)}function i(e,t){return(i=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}n.r(t),n.d(t,"ParseError",function(){return c});var c=function(e){function t(e,n,r){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),o(this,a(t).call(this,"".concat(e).concat(n&&r&&", expected ".concat(n,", received ").concat(r))))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&i(e,t)}(t,s(Error)),t}()},"./src/riff/parser.ts":
/*!****************************!*\
  !*** ./src/riff/parser.ts ***!
  \****************************/
/*! exports provided: parseBuffer, getChunk, getChunkLength, getSubChunks, getChunkId */function(e,t,n){"use strict";n.r(t),n.d(t,"parseBuffer",function(){return u}),n.d(t,"getChunk",function(){return i}),n.d(t,"getChunkLength",function(){return a}),n.d(t,"getSubChunks",function(){return c}),n.d(t,"getChunkId",function(){return f});var r=n(/*! ./parseError */"./src/riff/parseError.ts"),o=n(/*! ~/utils/buffer */"./src/utils/buffer.ts"),s=n(/*! ./riffChunk */"./src/riff/riffChunk.ts"),u=function(e){var t=f(e);if("RIFF"!==t)throw new r.ParseError("Invalid file format","RIFF",t);var n=f(e,8);if("sfbk"!==n)throw new r.ParseError("Invalid signature","sfbk",n);var o=e.subarray(8),u=c(o.subarray(4));return new s.RIFFChunk(t,o.length,o,u)},i=function(e,t){var n=f(e,t),r=a(e,t+4),o=[];return"RIFF"!==n&&"LIST"!==n||(o=c(e.subarray(t+12))),new s.RIFFChunk(n,r,e.subarray(t+8),o)},a=function(e,t){return((e=e.subarray(t,t+4))[0]|e[1]<<8|e[2]<<16|e[3]<<24)>>>0},c=function(e){for(var t=[],n=0;n<=e.length-8;){var r=i(e,n);t.push(r),n=(n+=8+r.length)%2?n+1:n}return t},f=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return Object(o.getStringFromBuffer)(e.subarray(t,t+4))}},"./src/riff/riffChunk.ts":
/*!*******************************!*\
  !*** ./src/riff/riffChunk.ts ***!
  \*******************************/
/*! exports provided: RIFFChunk */function(e,t,n){"use strict";n.r(t),n.d(t,"RIFFChunk",function(){return i});var r=n(/*! ./chunkIterator */"./src/riff/chunkIterator.ts"),o=n(/*! ~/utils */"./src/utils/index.ts");function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var i=function(){function e(t,n,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u(this,"id",void 0),u(this,"length",void 0),u(this,"buffer",void 0),u(this,"subChunks",void 0),this.id=t,this.length=n,this.buffer=r,this.subChunks=o}var t,n,i;return t=e,(n=[{key:"getString",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1?arguments[1]:void 0;return Object(o.getStringFromBuffer)(this.getBuffer(e,t||this.length-e))}},{key:"getInt16",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.buffer[e++]|this.buffer[e]<<8}},{key:"getUInt32",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return(this.buffer[e++]|this.buffer[e++]<<8|this.buffer[e++]<<16|this.buffer[e]<<24)>>>0}},{key:"getByte",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.buffer[e]}},{key:"getChar",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.buffer[e]<<24>>24}},{key:"iterator",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return new r.ChunkIterator(this,e)}},{key:"iterate",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=new r.ChunkIterator(this,t);return n.iterate(e),n.target}},{key:"getBuffer",value:function(e,t){return this.buffer.subarray(e,e+t)}}])&&s(t.prototype,n),i&&s(t,i),e}()},"./src/soundFont2.ts":
/*!***************************!*\
  !*** ./src/soundFont2.ts ***!
  \***************************/
/*! exports provided: SoundFont2 */function(e,t,n){"use strict";n.r(t),n.d(t,"SoundFont2",function(){return l});var r=n(/*! ./types */"./src/types/index.ts"),o=n(/*! ./chunk */"./src/chunk.ts"),s=n(/*! ./riff */"./src/riff/index.ts"),u=n(/*! ./chunks */"./src/chunks/index.ts"),i=n(/*! ./utils */"./src/utils/index.ts");function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){d(e,t,n[t])})}return e}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t,n){return t&&c(e.prototype,t),n&&c(e,n),e}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),d(this,"chunk",void 0),d(this,"metaData",void 0),d(this,"sampleData",void 0),d(this,"samples",void 0),d(this,"presetData",void 0),d(this,"instruments",void 0),d(this,"presets",void 0),d(this,"banks",void 0),this.chunk=t,this.metaData=t.subChunks[0].getMetaData(),this.sampleData=t.subChunks[1].getSampleData(),this.presetData=t.subChunks[2].getPresetData(),this.samples=this.getSamples(),this.instruments=this.getInstruments(),this.presets=this.getPresets(),this.banks=this.getBanks()}return f(e,null,[{key:"from",value:function(t){var n=Object(s.parseBuffer)(t),r=new o.SF2Chunk(n);if(3!==r.subChunks.length)throw new s.ParseError("Invalid sfbk structure","3 chunks","".concat(n.subChunks.length," chunks"));return new e(r)}}]),f(e,[{key:"getKeyData",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return Object(i.memoize)(function(e,n,r){var o=t.banks[n];if(o){var s=o.presets[r];if(s){var u=s.zones.find(function(n){return t.isKeyInRange(n,e)});if(u){var i=u.instrument,c=i.zones.find(function(n){return t.isKeyInRange(n,e)});if(c){var f=c.sample,d=a({},u.generators,c.generators),l=a({},u.modulators,c.modulators);return{keyNumber:e,preset:s,instrument:i,sample:f,generators:d,modulators:l}}}}}return null})(e,n,r)}},{key:"isKeyInRange",value:function(e,t){return void 0===e.keyRange||e.keyRange.lo<=t&&e.keyRange.hi>=t}},{key:"getBanks",value:function(){return this.presets.reduce(function(e,t){var n=t.header.bank;return e[n]||(e[n]={presets:[]}),e[n].presets[t.header.preset]=t,e},[])}},{key:"getPresets",value:function(){var e=this.presetData,t=e.presetHeaders,n=e.presetZones,o=e.presetGenerators,s=e.presetModulators;return Object(u.getItemsInZone)(t,n,s,o,this.instruments,r.GeneratorType.Instrument).filter(function(e){return"EOP"!==e.header.name}).map(function(e){return{header:e.header,zones:e.zones.map(function(e){return{keyRange:e.keyRange,generators:e.generators,modulators:e.modulators,instrument:e.reference}})}})}},{key:"getInstruments",value:function(){var e=this.presetData,t=e.instrumentHeaders,n=e.instrumentZones,o=e.instrumentModulators,s=e.instrumentGenerators;return Object(u.getItemsInZone)(t,n,o,s,this.samples,r.GeneratorType.SampleId).filter(function(e){return"EOI"!==e.header.name}).map(function(e){return{header:e.header,zones:e.zones.map(function(e){return{keyRange:e.keyRange,generators:e.generators,modulators:e.modulators,sample:e.reference}})}})}},{key:"getSamples",value:function(){var e=this;return this.presetData.sampleHeaders.filter(function(e){return"EOS"!==e.name}).map(function(t){if("EOS"!==t.name&&t.sampleRate<=0)throw new Error("Illegal sample rate of ".concat(t.sampleRate," hz in sample '").concat(t.name,"'"));return t.originalPitch>=128&&t.originalPitch<=254&&(t.originalPitch=60),{header:t,data:new Int16Array(new Uint8Array(e.sampleData.subarray(2*t.start,2*t.end)).buffer)}})}}]),e}()},"./src/types/bank.ts":
/*!***************************!*\
  !*** ./src/types/bank.ts ***!
  \***************************/
/*! no static exports found */function(e,t){},"./src/types/generator.ts":
/*!********************************!*\
  !*** ./src/types/generator.ts ***!
  \********************************/
/*! exports provided: GeneratorType, DEFAULT_GENERATOR_VALUES */function(e,t,n){"use strict";var r,o;function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.r(t),n.d(t,"GeneratorType",function(){return o}),n.d(t,"DEFAULT_GENERATOR_VALUES",function(){return u}),function(e){e[e.StartAddrsOffset=0]="StartAddrsOffset",e[e.EndAddrsOffset=1]="EndAddrsOffset",e[e.StartLoopAddrsOffset=2]="StartLoopAddrsOffset",e[e.EndLoopAddrsOffset=3]="EndLoopAddrsOffset",e[e.StartAddrsCoarseOffset=4]="StartAddrsCoarseOffset",e[e.ModLFOToPitch=5]="ModLFOToPitch",e[e.VibLFOToPitch=6]="VibLFOToPitch",e[e.ModEnvToPitch=7]="ModEnvToPitch",e[e.InitialFilterFc=8]="InitialFilterFc",e[e.InitialFilterQ=9]="InitialFilterQ",e[e.ModLFOToFilterFc=10]="ModLFOToFilterFc",e[e.ModEnvToFilterFc=11]="ModEnvToFilterFc",e[e.EndAddrsCoarseOffset=12]="EndAddrsCoarseOffset",e[e.ModLFOToVolume=13]="ModLFOToVolume",e[e.Unused1=14]="Unused1",e[e.ChorusEffectsSend=15]="ChorusEffectsSend",e[e.ReverbEffectsSend=16]="ReverbEffectsSend",e[e.Pan=17]="Pan",e[e.Unused2=18]="Unused2",e[e.Unused3=19]="Unused3",e[e.Unused4=20]="Unused4",e[e.DelayModLFO=21]="DelayModLFO",e[e.FreqModLFO=22]="FreqModLFO",e[e.DelayVibLFO=23]="DelayVibLFO",e[e.FreqVibLFO=24]="FreqVibLFO",e[e.DelayModEnv=25]="DelayModEnv",e[e.AttackModEnv=26]="AttackModEnv",e[e.HoldModEnv=27]="HoldModEnv",e[e.DecayModEnv=28]="DecayModEnv",e[e.SustainModEnv=29]="SustainModEnv",e[e.ReleaseModEnv=30]="ReleaseModEnv",e[e.KeyNumToModEnvHold=31]="KeyNumToModEnvHold",e[e.KeyNumToModEnvDecay=32]="KeyNumToModEnvDecay",e[e.DelayVolEnv=33]="DelayVolEnv",e[e.AttackVolEnv=34]="AttackVolEnv",e[e.HoldVolEnv=35]="HoldVolEnv",e[e.DecayVolEnv=36]="DecayVolEnv",e[e.SustainVolEnv=37]="SustainVolEnv",e[e.ReleaseVolEnv=38]="ReleaseVolEnv",e[e.KeyNumToVolEnvHold=39]="KeyNumToVolEnvHold",e[e.KeyNumToVolEnvDecay=40]="KeyNumToVolEnvDecay",e[e.Instrument=41]="Instrument",e[e.Reserved1=42]="Reserved1",e[e.KeyRange=43]="KeyRange",e[e.VelRange=44]="VelRange",e[e.StartLoopAddrsCoarseOffset=45]="StartLoopAddrsCoarseOffset",e[e.KeyNum=46]="KeyNum",e[e.Velocity=47]="Velocity",e[e.InitialAttenuation=48]="InitialAttenuation",e[e.Reserved2=49]="Reserved2",e[e.EndLoopAddrsCoarseOffset=50]="EndLoopAddrsCoarseOffset",e[e.CoarseTune=51]="CoarseTune",e[e.FineTune=52]="FineTune",e[e.SampleId=53]="SampleId",e[e.SampleModes=54]="SampleModes",e[e.Reserved3=55]="Reserved3",e[e.ScaleTuning=56]="ScaleTuning",e[e.ExclusiveClass=57]="ExclusiveClass",e[e.OverridingRootKey=58]="OverridingRootKey",e[e.Unused5=59]="Unused5",e[e.EndOper=60]="EndOper"}(o||(o={}));var u=(s(r={},o.StartAddrsOffset,0),s(r,o.EndAddrsOffset,0),s(r,o.StartLoopAddrsOffset,0),s(r,o.EndLoopAddrsOffset,0),s(r,o.StartAddrsCoarseOffset,0),s(r,o.ModLFOToPitch,0),s(r,o.VibLFOToPitch,0),s(r,o.ModEnvToPitch,0),s(r,o.InitialFilterFc,13500),s(r,o.InitialFilterQ,0),s(r,o.ModLFOToFilterFc,0),s(r,o.ModEnvToFilterFc,0),s(r,o.EndAddrsCoarseOffset,0),s(r,o.ModLFOToVolume,0),s(r,o.ChorusEffectsSend,0),s(r,o.ReverbEffectsSend,0),s(r,o.Pan,0),s(r,o.DelayModLFO,-12e3),s(r,o.FreqModLFO,0),s(r,o.DelayVibLFO,-12e3),s(r,o.FreqVibLFO,0),s(r,o.DelayModEnv,-12e3),s(r,o.AttackModEnv,-12e3),s(r,o.HoldModEnv,-12e3),s(r,o.DecayModEnv,-12e3),s(r,o.SustainModEnv,0),s(r,o.ReleaseModEnv,-12e3),s(r,o.KeyNumToModEnvHold,0),s(r,o.KeyNumToModEnvDecay,0),s(r,o.DelayVolEnv,-12e3),s(r,o.AttackVolEnv,-12e3),s(r,o.HoldVolEnv,-12e3),s(r,o.DecayVolEnv,-12e3),s(r,o.SustainVolEnv,0),s(r,o.ReleaseVolEnv,-12e3),s(r,o.KeyNumToVolEnvHold,0),s(r,o.KeyNumToVolEnvDecay,0),s(r,o.StartLoopAddrsCoarseOffset,0),s(r,o.KeyNum,-1),s(r,o.Velocity,-1),s(r,o.InitialAttenuation,0),s(r,o.EndLoopAddrsCoarseOffset,0),s(r,o.CoarseTune,0),s(r,o.FineTune,0),s(r,o.SampleModes,0),s(r,o.ScaleTuning,100),s(r,o.ExclusiveClass,0),s(r,o.OverridingRootKey,-1),s(r,o.Instrument,-1),s(r,o.KeyRange,-1),s(r,o.VelRange,-1),s(r,o.SampleId,-1),s(r,o.Unused1,-1),s(r,o.Unused2,-1),s(r,o.Unused3,-1),s(r,o.Unused4,-1),s(r,o.Unused5,-1),s(r,o.Reserved1,-1),s(r,o.Reserved2,-1),s(r,o.Reserved3,-1),s(r,o.EndOper,-1),r)},"./src/types/index.ts":
/*!****************************!*\
  !*** ./src/types/index.ts ***!
  \****************************/
/*! no static exports found */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./bank */"./src/types/bank.ts");for(var o in r)"default"!==o&&function(e){n.d(t,e,function(){return r[e]})}(o);var s=n(/*! ./generator */"./src/types/generator.ts");n.d(t,"GeneratorType",function(){return s.GeneratorType}),n.d(t,"DEFAULT_GENERATOR_VALUES",function(){return s.DEFAULT_GENERATOR_VALUES});var u=n(/*! ./instrument */"./src/types/instrument.ts");for(var o in u)["GeneratorType","DEFAULT_GENERATOR_VALUES","default"].indexOf(o)<0&&function(e){n.d(t,e,function(){return u[e]})}(o);var i=n(/*! ./key */"./src/types/key.ts");for(var o in i)["GeneratorType","DEFAULT_GENERATOR_VALUES","default"].indexOf(o)<0&&function(e){n.d(t,e,function(){return i[e]})}(o);var a=n(/*! ./metaData */"./src/types/metaData.ts");for(var o in a)["GeneratorType","DEFAULT_GENERATOR_VALUES","default"].indexOf(o)<0&&function(e){n.d(t,e,function(){return a[e]})}(o);var c=n(/*! ./modulator */"./src/types/modulator.ts");n.d(t,"TransformType",function(){return c.TransformType});var f=n(/*! ./preset */"./src/types/preset.ts");for(var o in f)["GeneratorType","DEFAULT_GENERATOR_VALUES","TransformType","default"].indexOf(o)<0&&function(e){n.d(t,e,function(){return f[e]})}(o);var d=n(/*! ./presetData */"./src/types/presetData.ts");for(var o in d)["GeneratorType","DEFAULT_GENERATOR_VALUES","TransformType","default"].indexOf(o)<0&&function(e){n.d(t,e,function(){return d[e]})}(o);var l=n(/*! ./sample */"./src/types/sample.ts");n.d(t,"SampleType",function(){return l.SampleType});var h=n(/*! ./zone */"./src/types/zone.ts");for(var o in h)["GeneratorType","DEFAULT_GENERATOR_VALUES","TransformType","SampleType","default"].indexOf(o)<0&&function(e){n.d(t,e,function(){return h[e]})}(o)},"./src/types/instrument.ts":
/*!*********************************!*\
  !*** ./src/types/instrument.ts ***!
  \*********************************/
/*! no static exports found */function(e,t){},"./src/types/key.ts":
/*!**************************!*\
  !*** ./src/types/key.ts ***!
  \**************************/
/*! no static exports found */function(e,t){},"./src/types/metaData.ts":
/*!*******************************!*\
  !*** ./src/types/metaData.ts ***!
  \*******************************/
/*! no static exports found */function(e,t){},"./src/types/modulator.ts":
/*!********************************!*\
  !*** ./src/types/modulator.ts ***!
  \********************************/
/*! exports provided: TransformType */function(e,t,n){"use strict";var r;n.r(t),n.d(t,"TransformType",function(){return r}),function(e){e[e.Linear=0]="Linear",e[e.Absolute=2]="Absolute"}(r||(r={}))},"./src/types/preset.ts":
/*!*****************************!*\
  !*** ./src/types/preset.ts ***!
  \*****************************/
/*! no static exports found */function(e,t){},"./src/types/presetData.ts":
/*!*********************************!*\
  !*** ./src/types/presetData.ts ***!
  \*********************************/
/*! no static exports found */function(e,t){},"./src/types/sample.ts":
/*!*****************************!*\
  !*** ./src/types/sample.ts ***!
  \*****************************/
/*! exports provided: SampleType */function(e,t,n){"use strict";var r;n.r(t),n.d(t,"SampleType",function(){return r}),function(e){e[e.EOS=0]="EOS",e[e.Mono=1]="Mono",e[e.Right=2]="Right",e[e.Left=4]="Left",e[e.Linked=8]="Linked",e[e.RomMono=32769]="RomMono",e[e.RomRight=32770]="RomRight",e[e.RomLeft=32772]="RomLeft",e[e.RomLinked=32776]="RomLinked"}(r||(r={}))},"./src/types/zone.ts":
/*!***************************!*\
  !*** ./src/types/zone.ts ***!
  \***************************/
/*! no static exports found */function(e,t){},"./src/utils/buffer.ts":
/*!*****************************!*\
  !*** ./src/utils/buffer.ts ***!
  \*****************************/
/*! exports provided: getStringFromBuffer */function(e,t,n){"use strict";n.r(t),n.d(t,"getStringFromBuffer",function(){return r});var r=function(e){return new TextDecoder("utf8").decode(e).split(/\0/)[0].trim()}},"./src/utils/index.ts":
/*!****************************!*\
  !*** ./src/utils/index.ts ***!
  \****************************/
/*! exports provided: getStringFromBuffer, memoize */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./buffer */"./src/utils/buffer.ts");n.d(t,"getStringFromBuffer",function(){return r.getStringFromBuffer});var o=n(/*! ./memoize */"./src/utils/memoize.ts");n.d(t,"memoize",function(){return o.memoize})},"./src/utils/memoize.ts":
/*!******************************!*\
  !*** ./src/utils/memoize.ts ***!
  \******************************/
/*! exports provided: memoize */function(e,t,n){"use strict";n.r(t),n.d(t,"memoize",function(){return r});var r=function(e){var t={};return function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];var s=JSON.stringify(r);if(s in t)return t[s];var u=e.apply(void 0,r);return t[s]=u,u}}}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,